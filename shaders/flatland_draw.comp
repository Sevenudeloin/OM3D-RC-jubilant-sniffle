#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba8) uniform image2D input_image;
layout(binding = 1, rgba8) uniform image2D output_image;

uniform bool is_drawing = false;
uniform vec2 prev_mouse_pos; // y axis is inverted to match opengl 2D coord space
uniform vec2 mouse_pos; // y axis is inverted to match opengl 2D coord space
uniform vec3 line_color = vec3(1.0);
uniform float line_width = 10.0;

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 texture_size = imageSize(input_image);
    if (pixel_coords.x >= texture_size.x || pixel_coords.y >= texture_size.y) {
        return;
    }

    vec4 output_color = imageLoad(input_image, pixel_coords);

    // Drawing logic

    if (is_drawing) {
        vec2 line_vec = mouse_pos - prev_mouse_pos;
        vec2 start_frag_vec = pixel_coords - prev_mouse_pos;
        float t = clamp(dot(line_vec, start_frag_vec) / dot(line_vec, line_vec), 0.0, 1.0);
        vec2 closest_point = prev_mouse_pos + t * line_vec;

        float frag_dist = length(pixel_coords - closest_point);

        if (frag_dist < line_width) {
            output_color = vec4(line_color, 1.0);
        }
    }

    imageStore(output_image, pixel_coords.xy, output_color);
}